---
import Layout from '../../../layouts/Layout.astro';
import { isAuthenticated } from '../../../middleware/auth';
import { createPost } from '../../../lib/db';
import slugify from 'slugify';

// Protect this route
const auth = await isAuthenticated(Astro);
if (!auth) {
  return Astro.redirect('/admin/login');
}

let error = '';
let success = '';

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const title = data.get('title')?.toString() || '';
    const content = data.get('content')?.toString() || '';
    const description = data.get('description')?.toString() || '';
    const category = data.get('category')?.toString() || '';
    const image = data.get('image')?.toString() || '';
    const publishDate = data.get('publishDate')?.toString();
    const published = data.get('published') === 'true';
    
    const slug = slugify(title, { lower: true, strict: true });
    
    const post = createPost({
      title,
      slug,
      content,
      description,
      category,
      image,
      published,
      publishDate: publishDate ? new Date(publishDate) : null
    });
    
    if (post) {
      success = 'Post created successfully!';
      if (!published) {
        success += ' The post has been saved as a draft.';
      }
    }
  } catch (e) {
    error = 'Failed to create post. Please try again.';
  }
}

const categories = [
  'Ancient History',
  'Medieval Times',
  'Modern Era',
  'Contemporary History',
  'Military History',
  'Cultural History'
];
---

<Layout title="Create New Post">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">Create New Post</h1>
      <a
        href="/admin/dashboard"
        class="text-primary-600 hover:text-primary-900"
      >
        Back to Dashboard
      </a>
    </div>

    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
        {error}
      </div>
    )}

    {success && (
      <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
        {success}
      </div>
    )}

    <form method="POST" class="space-y-6 bg-white p-6 rounded-lg shadow">
      <div>
        <label for="title" class="block text-sm font-medium text-primary-700">
          Title
        </label>
        <input
          type="text"
          name="title"
          id="title"
          required
          class="mt-1 block w-full rounded-md border-primary-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
        />
      </div>

      <div>
        <label for="description" class="block text-sm font-medium text-primary-700">
          Description (SEO)
        </label>
        <textarea
          name="description"
          id="description"
          rows="3"
          required
          class="mt-1 block w-full rounded-md border-primary-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
        ></textarea>
      </div>

      <div>
        <label for="category" class="block text-sm font-medium text-primary-700">
          Category
        </label>
        <select
          name="category"
          id="category"
          required
          class="mt-1 block w-full rounded-md border-primary-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
        >
          {categories.map(cat => (
            <option value={cat}>{cat}</option>
          ))}
        </select>
      </div>

      <div>
        <label for="content" class="block text-sm font-medium text-primary-700">
          Content
        </label>
        <div class="mt-1 border rounded-md overflow-hidden">
          <div id="editor" class="prose max-w-none p-4 min-h-[300px]"></div>
          <input type="hidden" name="content" id="content-input" />
        </div>
      </div>

      <div>
        <label for="image" class="block text-sm font-medium text-primary-700">
          Featured Image URL
        </label>
        <input
          type="url"
          name="image"
          id="image"
          required
          class="mt-1 block w-full rounded-md border-primary-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
        />
      </div>

      <div>
        <label for="publishDate" class="block text-sm font-medium text-primary-700">
          Publish Date (leave empty for immediate publication)
        </label>
        <input
          type="datetime-local"
          name="publishDate"
          id="publishDate"
          class="mt-1 block w-full rounded-md border-primary-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
        />
      </div>

      <div class="flex items-center">
        <input
          type="checkbox"
          name="published"
          id="published"
          value="true"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-primary-300 rounded"
        />
        <label for="published" class="ml-2 block text-sm text-primary-700">
          Publish immediately
        </label>
      </div>

      <div class="flex justify-end space-x-4">
        <button
          type="button"
          id="preview-btn"
          class="px-4 py-2 border border-primary-300 rounded-md text-primary-700 hover:bg-primary-50"
        >
          Preview
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
        >
          Create Post
        </button>
      </div>
    </form>
  </div>
</Layout>

<script>
import { Editor } from '@tiptap/core';
import StarterKit from '@tiptap/starter-kit';

// Wait for DOM to be loaded
document.addEventListener('DOMContentLoaded', () => {
  const editorElement = document.querySelector('#editor');
  const contentInput = document.querySelector('#content-input');
  const previewBtn = document.querySelector('#preview-btn');

  if (editorElement && contentInput) {
    // Initialize TipTap editor
    const editor = new Editor({
      element: editorElement,
      extensions: [
        StarterKit,
      ],
      content: '',
      onUpdate: ({ editor }) => {
        // Update hidden input with HTML content
        contentInput.value = editor.getHTML();
      },
    });

    // Handle preview button
    if (previewBtn) {
      previewBtn.addEventListener('click', () => {
        const content = editor.getHTML();
        const previewWindow = window.open('', '_blank');
        if (previewWindow) {
          previewWindow.document.write(`
            <html>
              <head>
                <title>Preview</title>
                <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
              </head>
              <body class="max-w-4xl mx-auto py-10 px-4">
                <div class="prose max-w-none">
                  ${content}
                </div>
              </body>
            </html>
          `);
        }
      });
    }
  }
});
</script>